{
	"summary": {
		"prefix": "summary",
		"body": [
			"/// <summary> $1 </summary>"
		],
		"description": "生成注释"
	},
	"gv2": {
		"prefix": "gv2",
		"body": [
			"using GameVec2 = UnityEngine.Vector2;",
		],
		"description": "定义Vec2别名"
	},
	"gv3": {
		"prefix": "gv3",
		"body": [
			"using GameVec3 = UnityEngine.Vector3;",
		],
		"description": "定义Vec3别名"
	},
	"gs": {
		"prefix": "gs",
		"body": [
			"public $1 $2",
			"{",
			"    get { return _$2; }",
			"    set { _$2 = value; }",
			"}",
			"private $1 _$2;"
		],
		"description": "生成类似的属性"
	},
	"nsl": {
		"prefix": "nsl",
		"body": [
			"namespace GamePlay.Bussiness.Logic",
			"{",
			"    public class $1",
			"    {",
			"    }",
			"}"
		],
	},
	"nsr": {
		"prefix": "nsr",
		"body": [
			"namespace GamePlay.Bussiness.Renderer",
			"{",
			"    public class $1",
			"    {",
			"    }",
			"}",
		],
	},
	"test_mono": {
		"prefix": "test_mono",
		"body": [
			"[UnityEditor.InitializeOnLoad]",
			"public class Loader",
			"{",
			"    static Loader()",
			"    {",
			"        UnityEditor.EditorApplication.playModeStateChanged += OnPlayModeStateChanged;",
			"    }",
			"",
			"    private static void OnPlayModeStateChanged(UnityEditor.PlayModeStateChange state)",
			"    {",
			"        if (state == UnityEditor.PlayModeStateChange.EnteredPlayMode)",
			"        {",
			"            var go = new GameObject(\"$1\");",
			"            go.AddComponent<$1>();",
			"        }",
			"    }",
			"}"
		],
	},
	"factor_l": {
		"prefix": "factor_l",
		"body": [
			"using GamePlay.Core;",
			"",
			"namespace GamePlay.Bussiness.Logic",
			"{",
			"    public class Game$1Factory",
			"    {",
			"        public Game$1Template template { get; private set; }",
			"        public Game$1Factory()",
			"        {",
			"            template = new Game$1Template();",
			"        }",
			"        public Game$1Entity Load(int typeId)",
			"        {",
			"            if (!template.TryGet(typeId, out var model))",
			"            {",
			"                GameLogger.LogError(\"Game$1Factory.Load: typeId not found: \" + typeId);",
			"                return null;",
			"            }",
			"            var entity = new Game$1Entity(model);",
			"            return entity;",
			"        }",
			"    }",
			"}"
		]
	},
	"template_l": {
		"prefix": "template_l",
		"body": [
			"using System.Collections.Generic;",
			"using GamePlay.Config;",
			"using UnityEngine;",
			"",
			"namespace GamePlay.Bussiness.Logic",
			"{",
			"    public class Game$1Template",
			"    {",
			"        private Dictionary<int, Game$1Model> _dict;",
			"        private Dictionary<int, Game$1SO> _soDict;",
			"",
			"        public Game$1Template()",
			"        {",
			"            _dict = new Dictionary<int, Game$1Model>();",
			"            var path = GameConfigCollection.$2_CONFIG_DIR_PATH;",
			"            var resList = Resources.LoadAll(path, typeof(Game$1SO));",
			"            _soDict = new Dictionary<int, Game$1SO>();",
			"            foreach (var res in resList)",
			"            {",
			"                var so = res as Game$1SO;",
			"                _soDict.Add(so.typeId, so);",
			"            }",
			"        }",
			"",
			"        public bool TryGet(int typeId, out Game$1Model model)",
			"        {",
			"            if (_dict.TryGetValue(typeId, out model))",
			"            {",
			"                return true;",
			"            }",
			"            if (!_soDict.TryGetValue(typeId, out var so))",
			"            {",
			"                model = null;",
			"                return false;",
			"            }",
			"            model = new Game$1Model();",
			"            _dict.Add(typeId, model);",
			"            return true;",
			"        }",
			"    }",
			"}"
		],
	},
	"domain_r": {
		"prefix": "domain_r",
		"body": [
			"namespace GamePlay.Bussiness.Renderer",
			"{",
			"    public class Game$1DomainR : Game$1DomainApiR",
			"    {",
			"        GameContextR _context;",
			"",
			"       public Game$1DomainR()",
			"        {",
			"        }",
			"",
			"        public void Inject(GameContextR context)",
			"        {",
			"            this._context = context;",
			"            this._BindEvents();",
			"        }",
			"",
			"        public void Destroy()",
			"        {",
			"            this._UnbindEvents();",
			"        }",
			"",
			"        private void _BindEvents()",
			"        {",
			"        }",
			"",
			"        private void _UnbindEvents()",
			"        {",
			"        }",
			"",
			"    }",
			"}"
		]
	},
	"domain_l": {
		"prefix": "domain_l",
		"body": [
			"namespace GamePlay.Bussiness.Logic",
			"{",
			"    public class Game$1Domain : Game$1DomainApi",
			"    {",
			"        GameContext _context;",
			"",
			"       public Game$1Domain()",
			"        {",
			"        }",
			"",
			"        public void Inject(GameContext context)",
			"        {",
			"            this._context = context;",
			"        }",
			"",
			"        public void Destroy()",
			"        {",
			"        }",
			"",
			"        public void Tick(float dt)",
			"        {",
			"        }",
			"",
			"    }",
			"}"
		]
	},
	"context_r": {
		"prefix": "context_r",
		"body": [
			"namespace GamePlay.Bussiness.Renderer",
			"{",
			"    public class Game$1ContextR",
			"    {",
			"        public Game$1RepoR repo => this._repo;",
			"        Game$1RepoR _repo;",
			"        public Game$1FactoryR factory => this._factory;",
			"        Game$1FactoryR _factory;",
			"",
			"        public Game$1ContextR()",
			"        {",
			"            this._repo = new Game$1RepoR();",
			"            this._factory = new Game$1FactoryR();",
			"        }",
			"    }",
			"}"
		]
	},
	"context_l": {
		"prefix": "context_l",
		"body": [
			"namespace GamePlay.Bussiness.Logic",
			"{",
			"    public class Game$1Context",
			"    {",
			"        public Game$1Repo repo => this._repo;",
			"        Game$1Repo _repo;",
			"        public Game$1Factory factory => this._factory;",
			"        Game$1Factory _factory;",
			"",
			"        public Game$1Context()",
			"        {",
			"            this._repo = new Game$1Repo();",
			"            this._factory = new Game$1Factory();",
			"        }",
			"    }",
			"}"
		]
	},
	"state_domain_base": {
		"prefix": "state_domain_base",
		"body": [
			"namespace GamePlay.Bussiness.Logic",
			"{",
			"",
			"    public abstract class Game$1StateDomainBase",
			"    {",
			"        protected GameContext _context;",
			"",
			"        public Game$1StateDomainBase() { }",
			"",
			"        public void Inject(GameContext context)",
			"        {",
			"            this._context = context;",
			"        }",
			"",
			"        /** 尝试进入状态 */",
			"        public bool TryEnter(Game$1Entity entity)",
			"        {",
			"            if (!this.CheckEnter(entity)) return false;",
			"            this.Enter(entity);",
			"            return true;",
			"        }",
			"",
			"        /** 状态更新 */",
			"        public void Tick(Game$1Entity entity, float frameTime)",
			"        {",
			"            this._Tick(entity, frameTime);",
			"            var toState = this._CheckExit(entity);",
			"            if (toState != Game$1StateType.None)",
			"            {",
			"                this._context.domainApi.$2Api.fsmApi.TryEnter(entity, toState);",
			"            }",
			"        }",
			"",
			"        /** 判定进入条件 */",
			"        public abstract bool CheckEnter(Game$1Entity entity);",
			"        /** 进入. ps: 直接调用则会跳过了条件判定 */",
			"        public abstract void Enter(Game$1Entity entity);",
			"        /** 状态更新 */",
			"        protected abstract void _Tick(Game$1Entity entity, float frameTime);",
			"        /** 判定退出条件 */",
			"        protected abstract Game$1StateType _CheckExit(Game$1Entity entity);",
			"        /** 退出状态 */",
			"        public virtual void ExitTo(Game$1Entity entity, Game$1StateType toState) { }",
			"    }",
			"",
			"}"
		]
	},
	"nsu": {
		"prefix": "nsu",
		"body": [
			"namespace GamePlay.Bussiness.UI",
			"{",
			"    public class $1",
			"    {",
			"    }",
			"}",
		]
	},
	"uiBase": {
		"prefix": "uiBase",
		"body": [
			"using UnityEngine.UI;",
			"namespace GamePlay.Bussiness.UI",
			"{",
			"    public struct UI$2ViewInput",
			"    {",
			"    }",
			"",
			"    public class UI$2View : UIBase",
			"    {",
			"        public override UILayerType layerType => UILayerType.PopUp;",
			"        public override string uiPkgUrl => \"UI/System/$1\";",
			"        public override string uiName => \"UI$2View\";",
			"        public UI$2ViewBinder viewBinder;",
			"        private UI$2ViewInput _viewInput;",
			"",
			"        protected override void _OnInit()",
			"        {",
			"            this.viewBinder = new UI$2ViewBinder(this.go);",
			"            this._viewInput = (UI$2ViewInput)this._uiInput.customData;",
			"        }",
			"",
			"        protected override void _BindEvents()",
			"        {",
			"            base._BindEvents();",
			"        }",
			"",
			"        protected override void _UnbindEvents()",
			"        {",
			"            base._UnbindEvents();",
			"        }",
			"",
			"        protected override void _OnShow()",
			"        {",
			"            base._OnShow();",
			"        }",
			"",
			"        protected override void _OnHide()",
			"        {",
			"            base._OnHide();",
			"        }",
			"    }",
			"}",
		]
	},
	"domain_u": {
		"prefix": "domain_u",
		"body": [
			"namespace GamePlay.Bussiness.UI",
			"{",
			"    public class UI$1Domain : UISystemDomainBase, UI$1DomainApi",
			"    {",
			"        public UI$1Model model { get; private set; }",
			"",
			"        public UI$1Domain()",
			"        {",
			"        }",
			"",
			"        protected override void _BindEvents()",
			"        {",
			"        }",
			"",
			"        protected override void _UnbindEvents()",
			"        {",
			"        }",
			"",
			"",
			"    }",
			"}"
		]
	}
}