{
	"gs": {
		"prefix": "gs",
		"body": [
			"public $1 $2",
			"{",
			"    get { return _$2; }",
			"    set { _$2 = value; }",
			"}",
			"private $1 _$2;"
		],
		"description": "生成类似的属性"
	},
	"nsl": {
		"prefix": "nsl",
		"body": [
			"namespace GamePlay.Bussiness.Logic",
			"{",
			"    public class $1",
			"    {",
			"    }",
			"}"
		],
	},
	"nsr": {
		"prefix": "nsr",
		"body": [
			"namespace GamePlay.Bussiness.Renderer",
			"{",
			"    public class $1",
			"    {",
			"    }",
			"}",
		],
	},
	"test_mono": {
		"prefix": "test_mono",
		"body": [
			"[UnityEditor.InitializeOnLoad]",
			"public class Loader",
			"{",
			"    static Loader()",
			"    {",
			"        UnityEditor.EditorApplication.playModeStateChanged += OnPlayModeStateChanged;",
			"    }",
			"",
			"    private static void OnPlayModeStateChanged(UnityEditor.PlayModeStateChange state)",
			"    {",
			"        if (state == UnityEditor.PlayModeStateChange.EnteredPlayMode)",
			"        {",
			"            var go = new GameObject(\"$1\");",
			"            go.AddComponent<$1>();",
			"        }",
			"    }",
			"}"
		],
	},
	"factor_l": {
		"prefix": "factor_l",
		"body": [
			"using GamePlay.Core;",
			"",
			"namespace GamePlay.Bussiness.Logic",
			"{",
			"    public class Game$1Factory",
			"    {",
			"        public Game$1Template template { get; private set; }",
			"        public Game$1Factory()",
			"        {",
			"            template = new Game$1Template();",
			"        }",
			"        public Game$1Entity Load(int typeId)",
			"        {",
			"            if (!template.TryGet(typeId, out var model))",
			"            {",
			"                GameLogger.LogError(\"Game$1Factory.Load: typeId not found: \" + typeId);",
			"                return null;",
			"            }",
			"            var entity = new Game$1Entity(model);",
			"            return entity;",
			"        }",
			"    }",
			"}"
		]
	},
	"template_l": {
		"prefix": "template_l",
		"body": [
			"using System.Collections.Generic;",
			"using GamePlay.Config;",
			"using UnityEngine;",
			"",
			"namespace GamePlay.Bussiness.Logic",
			"{",
			"    public class Game$1Template",
			"    {",
			"        private Dictionary<int, Game$1Model> _dict;",
			"        private Dictionary<int, Game$1SO> _soDict;",
			"",
			"        public Game$1Template()",
			"        {",
			"            _dict = new Dictionary<int, Game$1Model>();",
			"            var path = GameConfigCollection.$2_CONFIG_DIR_PATH;",
			"            var soList = Resources.LoadAll(path, typeof(Game$1SO));",
			"            _soDict = new Dictionary<int, Game$1SO>();",
			"            foreach (var so in soList)",
			"            {",
			"                var so = so as Game$1SO;",
			"                if (so == null)",
			"                {",
			"                    Debug.LogError(\"Game$1Template: LoadAll: invalid Game$1SO: \" + so);",
			"                    continue;",
			"                }",
			"                _soDict.Add(so.typeId, so);",
			"            }",
			"        }",
			"",
			"        public bool TryGet(int typeId, out Game$1Model model)",
			"        {",
			"            if (_dict.TryGetValue(typeId, out model))",
			"            {",
			"                return true;",
			"            }",
			"            if (!_soDict.TryGetValue(typeId, out var so))",
			"            {",
			"                model = null;",
			"                return false;",
			"            }",
			"            model = new Game$1Model();",
			"            _dict.Add(typeId, model);",
			"            return true;",
			"        }",
			"    }",
			"}"
		],
	},
	"domain_r": {
		"prefix": "domain_r",
		"body": [
			"namespace GamePlay.Bussiness.Renderer",
			"{",
			"    public class Game$1DomainR : Game$1DomainApiR",
			"    {",
			"        GameContextR _context;",
			"",
			"       public Game$1DomainR()",
			"        {",
			"        }",
			"",
			"        public void Inject(GameContextR context)",
			"        {",
			"            this._context = context;",
			"            this._BindEvent();",
			"        }",
			"",
			"        public void Dispose()",
			"        {",
			"            this._UnbindEvents();",
			"        }",
			"",
			"        private void _BindEvent()",
			"        {",
			"        }",
			"",
			"        private void _UnbindEvents()",
			"        {",
			"        }",
			"",
			"    }",
			"}"
		]
	},
	"context_r": {
		"prefix": "context_r",
		"body": [
			"namespace GamePlay.Bussiness.Renderer",
			"{",
			"    public class Game$1ContextR",
			"    {",
			"        public Game$1RepoR repo => this._repo;",
			"        Game$1RepoR _repo;",
			"        public Game$1FactoryR factory => this._factory;",
			"        Game$1FactoryR _factory;",
			"",
			"        public Game$1ContextR()",
			"        {",
			"            this._repo = new Game$1RepoR();",
			"            this._factory = new Game$1FactoryR();",
			"        }",
			"    }",
			"}"
		]
	}
}